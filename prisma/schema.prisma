generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  MANAGER
  GUEST
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}
model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userName    String    @unique
  password    String
  role        Role
  employeeId  String    @unique @db.ObjectId  // Foreign key to Employee
  employee    Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)  // One-to-one relation

  @@map("users")  // Optional: Map to collection name
}

model Employee {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customId    String   @unique
  name        String
  email       String   @unique
  status      Status
  designation String
  department  String
  user        User?    @relation  // Back-reference to User (optional, for queries)

  @@map("employees")  
}

model TNA {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber    String
  buyer          String
  style          String
  totalTasks     Int
  completedTasks Int
  percentage     Int
  status         String
  dueDate        DateTime
  currentStage   String
  merchandiser   String
  priority       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@map("tna")
}

model AuditLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp   DateTime @default(now())
  user        String
  userRole    String
  action      String
  resource    String
  resourceId  String
  description String
  ipAddress   String
  userAgent   String
  status      String
}

// npx prisma db pull
// npx prisma db push
// npx prisma generate
// npx prisma migrate dev --name init
// npx prisma studio