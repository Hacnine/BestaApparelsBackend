generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGEMENT
  MERCHANDISER
  CAD
  SAMPLE_FABRIC
  SAMPLE_ROOM
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum DEPARTMENTS {
  MERCHANDISING
  MANAGEMENT
  IT
  CAD_ROOM
  SAMPLE_FABRIC
  SAMPLE_SEWING
}

enum TNAStatus {
  ACTIVE
  CANCELLED
  INACTIVE
}

enum sampleType {
  DVP
  PP1
  PP2
  PP3
  PP4
  PP5
}

model Employee {
  id          Int         @id @default(autoincrement())
  customId    String      @unique
  name        String
  email       String      @unique
  phoneNumber String?
  status      Status
  designation String
  department  DEPARTMENTS
  user        User?       @relation

  @@map("employees")
}

model User {
  id         Int       @id @default(autoincrement())
  userName   String    @unique
  password   String
  role       Role
  employeeId Int       @unique
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  tnas       TNA[]     @relation(name: "TNAtoMerchandiser") // One-to-many relation

  // Add opposite relations for createdBy
  createdTnas               TNA[]               @relation("UserCreatedTnas")
  createdCadDesigns         CadDesign[]         @relation("UserCreatedCadDesigns")
  createdFabricBookings     FabricBooking[]     @relation("UserCreatedFabricBookings")
  createdSampleDevelopments SampleDevelopment[] @relation("UserCreatedSampleDevelopments")
  createdCostSheets         CostSheet[]         @relation("UserCreatedCostSheets")

  @@map("users")
}

model Style {
  id                 Int                 @id @default(autoincrement())
  name               String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  // tnas               TNA[]               @relation(name: "StyleToTNA")
  // fabricBookings     FabricBooking[]     @relation(name: "StyleToFabricBooking")
  // sampleDevelopments SampleDevelopment[] @relation(name: "StyleToSampleDevelopment")
  // cadDesigns         CadDesign[]         @relation(name: "StyleToCadDesign")
  // dhlTrackings       DHLTracking[]       @relation(name: "StyleToDHLTracking")
  costSheets         CostSheet[]        @relation(name: "StyleToCostSheet")

  @@map("styles")
}

model TNA {
  id                Int        @id @default(autoincrement())
  createdById       Int?
  createdBy         User?      @relation("UserCreatedTnas", fields: [createdById], references: [id])
  buyer             Buyer?     @relation(fields: [buyerId], references: [id], name: "TNAtoBuyer")
  buyerId           Int? // One-to-many, no @unique
  style             String
  itemName          String
  itemImage         String?
  sampleSendingDate DateTime
  orderDate         DateTime
  merchandiser      User?      @relation(fields: [userId], references: [id], name: "TNAtoMerchandiser")
  status            TNAStatus  @default(ACTIVE)
  sampleType        sampleType
  userId            Int? // No @unique for one-to-many
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("tnas")
}

model Buyer {
  id                Int         @id @default(autoincrement())
  name              String
  country           String
  buyerDepartments  Department? @relation("Buyer_buyerDepartments", fields: [buyerDepartmentId], references: [id])
  buyerDepartmentId Int?
  tnas              TNA[]       @relation(name: "TNAtoBuyer")

  @@map("buyers")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  user        String
  userRole    String
  action      String
  resource    String
  resourceId  String
  description String
  ipAddress   String
  userAgent   String
  status      String

  @@map("audit_logs")
}

model Department {
  id            Int     @id @default(autoincrement())
  name          String
  contactPerson String
  buyers        Buyer[] @relation("Buyer_buyerDepartments")

  @@map("departments")
}

model CadDesign {
  id                    Int       @id @default(autoincrement())
  createdById           Int?
  createdBy             User?     @relation("UserCreatedCadDesigns", fields: [createdById], references: [id])
  style                 String
  fileReceiveDate       DateTime
  completeDate          DateTime
  CadMasterName         String?
  finalFileReceivedDate DateTime?
  finalCompleteDate     DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("cad_designs")
}

model FabricBooking {
  id                Int       @id @default(autoincrement())
  createdById       Int?
  createdBy         User?     @relation("UserCreatedFabricBookings", fields: [createdById], references: [id])
  style             String
  bookingDate       DateTime
  receiveDate       DateTime
  actualBookingDate DateTime?
  actualReceiveDate DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("fabric_bookings")
}

model SampleDevelopment {
  id                       Int       @id @default(autoincrement())
  createdById              Int?
  createdBy                User?     @relation("UserCreatedSampleDevelopments", fields: [createdById], references: [id])
  style                    String
  samplemanName            String
  sampleReceiveDate        DateTime
  sampleCompleteDate       DateTime
  actualSampleReceiveDate  DateTime?
  actualSampleCompleteDate DateTime?
  sampleQuantity           Int
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@map("sample_developments")
}

model DHLTracking {
  id             Int      @id @default(autoincrement())
  style          String
  date           DateTime
  trackingNumber String
  isComplete     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("dhl_trackings")
}

model CostSheet {
  id          Int      @id @default(autoincrement())
  styleId     Int
  style       Style    @relation("StyleToCostSheet", fields: [styleId], references: [id])
  createdById Int
  createdBy   User     @relation("UserCreatedCostSheets", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cadRows    Json
  fabricRows Json
  trimsRows  Json
  othersRows Json
  summaryRows Json

  @@map("cost_sheets")
}

// node combine-schema.js
// npx prisma db push
// npx prisma generate
// npx prisma migrate dev --name init
// npx prisma studio
